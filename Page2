def chunk_number_with_overlap(num: int) -> list[tuple[int, int]]:
    """
    Split a number into overlapping chunks.
    Each chunk has a size of approximately 9 numbers with 2 number overlap.
    
    Args:
        num (int): The number to split into chunks
        
    Returns:
        list[tuple[int, int]]: List of tuples containing (start, end) ranges
        
    Example:
        12 -> [(1, 9), (8, 13)]
        16 -> [(1, 9), (8, 16), (15, 17)]
    """
    if num <= 9:
        return [(1, num + 1)]
    
    chunks = [(1, 9)]  # First chunk always starts with 1-9
    
    # If number is greater than 9, create additional chunks
    current_pos = 9
    
    while current_pos < num:
        # Start position is always 1 less than current position
        start = current_pos - 1
        end = min(start + 9, num + 1)  # +1 to include the number itself
        
        # If this would be the last chunk and it would be too small, adjust previous chunk
        if end == num + 1 and end - start <= 3:
            chunks[-1] = (chunks[-1][0], end)
            break
            
        chunks.append((start, end))
        current_pos = end
    
    # Special handling for the last chunk if needed
    if num > chunks[-1][1] - 2:
        chunks.append((num - 2, num + 1))
    
    return chunks

# Test cases
def test_chunking():
    test_numbers = [12, 16, 20, 25]
    
    print("Testing number chunking:")
    for num in test_numbers:
        chunks = chunk_number_with_overlap(num)
        print(f"\nNumber {num} -> {chunks}")
        
        # Verify continuity and overlap
        for i in range(len(chunks) - 1):
            current_chunk = chunks[i]
            next_chunk = chunks[i + 1]
            overlap = set(range(current_chunk[0], current_chunk[1])) & set(range(next_chunk[0], next_chunk[1]))
            print(f"Overlap between chunk {i} and {i+1}: {sorted(overlap)}")

# Run tests
if __name__ == "__main__":
    # Test specific cases
    print("Specific examples:")
    print("12 ->", chunk_number_with_overlap(12))
    print("16 ->", chunk_number_with_overlap(16))
