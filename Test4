def chunk_number_with_overlap(num: int) -> list[tuple[int, int]]:
    """
    Split a number into overlapping chunks.
    Each chunk has either:
    - minimum size of 8 numbers
    - OR whatever pages are left
    With 1 number overlap between chunks.
    
    Args:
        num (int): The number to split into chunks
        
    Returns:
        list[tuple[int, int]]: List of tuples containing (start, end) ranges
        
    Example:
        12 -> [(1, 9), (9, 12)]
        16 -> [(1, 9), (9, 16), (16, 17)]
    """
    if num <= 8:
        return [(1, num + 1)]
    
    chunks = []
    start = 1
    
    while start <= num:
        if start == 1:
            # First chunk is always 1-9
            chunks.append((1, 9))
            start = 9  # Next chunk starts at 9 (1-page overlap)
        else:
            # For subsequent chunks
            end = min(start + 8, num + 1)  # Try to get 8 more pages if possible
            chunks.append((start, end))
            start = end  # Next chunk starts at current end (1-page overlap)
            
            if end >= num:  # Break if we've reached or exceeded the target
                break
    
    return chunks

# Test cases
def test_chunking():
    test_numbers = [12, 16, 20, 25]
    
    print("Testing number chunking:")
    for num in test_numbers:
        chunks = chunk_number_with_overlap(num)
        print(f"\nNumber {num} -> {chunks}")
        
        # Print chunk sizes
        for i, (start, end) in enumerate(chunks):
            print(f"Chunk {i + 1} size: {end - start}")
            
        # Verify overlap
        if len(chunks) > 1:
            for i in range(len(chunks) - 1):
                current_chunk = chunks[i]
                next_chunk = chunks[i + 1]
                overlap = set(range(current_chunk[0], current_chunk[1])) & set(range(next_chunk[0], next_chunk[1]))
                print(f"Overlap between chunk {i} and {i+1}: {sorted(overlap)}")

if __name__ == "__main__":
    test_chunking()
    
    # Additional specific examples
    print("\nSpecific examples:")
    print("12 ->", chunk_number_with_overlap(12))
    print("16 ->", chunk_number_with_overlap(16))
